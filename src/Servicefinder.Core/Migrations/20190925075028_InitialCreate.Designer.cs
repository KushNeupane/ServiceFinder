// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Servicefinder.Core.DatabaseContext;

namespace Servicefinder.Core.Migrations
{
    [DbContext(typeof(CommonDbContext))]
    [Migration("20190925075028_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ServiceFinder.DI.Core.ApplicationUserModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("OriginalImageName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserModel");
                });

            modelBuilder.Entity("Servicefinder.Core.Model.AnswerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText");

                    b.Property<DateTime?>("ChangeDate");

                    b.Property<string>("ChangedBy");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("QuestionId");

                    b.Property<string>("UserChangedId");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("answer");
                });

            modelBuilder.Entity("Servicefinder.Core.Model.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChangeDate");

                    b.Property<string>("ChangedBy");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<string>("ImageURL");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.Property<string>("SystemDefinedImageName");

                    b.Property<string>("UserChangedId");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 971, DateTimeKind.Local).AddTicks(1148),
                            Name = "Hospitality",
                            Status = false
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 971, DateTimeKind.Local).AddTicks(6195),
                            Name = "Travel",
                            Status = false
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 971, DateTimeKind.Local).AddTicks(6201),
                            Name = "Transportation",
                            Status = false
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 971, DateTimeKind.Local).AddTicks(6202),
                            Name = "Media",
                            Status = false
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 971, DateTimeKind.Local).AddTicks(6204),
                            Name = "Entertainment",
                            Status = false
                        });
                });

            modelBuilder.Entity("Servicefinder.Core.Model.CityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChangeDate");

                    b.Property<string>("ChangedBy");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Province");

                    b.Property<bool>("Status");

                    b.Property<string>("UserChangedId");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("Id");

                    b.ToTable("city");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(189),
                            Name = "Kathmandu",
                            Province = "3",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(612),
                            Name = "Pokhara",
                            Province = "Gandaki",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(616),
                            Name = "Lalitpur",
                            Province = "3",
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(618),
                            Name = "Biratnagar",
                            Province = "1",
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(620),
                            Name = "Birjung",
                            Province = "2",
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(622),
                            Name = "Bharatpur",
                            Province = "3",
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(624),
                            Name = "Dharan",
                            Province = "1",
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(625),
                            Name = "Butwal",
                            Province = "5",
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(628),
                            Name = "Janakpur",
                            Province = "2",
                            Status = true
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(629),
                            Name = "Dhangadhi",
                            Province = "Sudurpashchim",
                            Status = true
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(631),
                            Name = "Bhaktapur",
                            Province = "3",
                            Status = true
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(633),
                            Name = "Nepalgunj",
                            Province = "5",
                            Status = true
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(635),
                            Name = "Hetauda",
                            Province = "3",
                            Status = true
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(637),
                            Name = "Itahari",
                            Province = "1",
                            Status = true
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(638),
                            Name = "Banepa",
                            Province = "3",
                            Status = true
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(639),
                            Name = "Dhulikhel",
                            Province = "3",
                            Status = true
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(642),
                            Name = "Baglung",
                            Province = "Gandaki",
                            Status = true
                        });
                });

            modelBuilder.Entity("Servicefinder.Core.Model.QuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChangeDate");

                    b.Property<string>("ChangedBy");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("QuestionText");

                    b.Property<int>("ServiceItemId");

                    b.Property<string>("UserChangedId");

                    b.Property<string>("UserCreatedId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceItemId");

                    b.HasIndex("UserId");

                    b.ToTable("question");
                });

            modelBuilder.Entity("Servicefinder.Core.Model.ServiceItemImageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChangeDate");

                    b.Property<string>("ChangedBy");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("OriginalImageName");

                    b.Property<int>("ServiceItemId");

                    b.Property<string>("SystemDefinedImageName");

                    b.Property<string>("UserChangedId");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceItemId");

                    b.ToTable("serviceItemImages");
                });

            modelBuilder.Entity("Servicefinder.Core.Model.ServiceItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId");

                    b.Property<DateTime?>("ChangeDate");

                    b.Property<string>("ChangedBy");

                    b.Property<int?>("CityId");

                    b.Property<string>("CoverImageUrl");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("OriginalCoverImageName");

                    b.Property<string>("OriginalProfileImageName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("ProfileImageUrl");

                    b.Property<TimeSpan?>("ServiceCloseTime");

                    b.Property<TimeSpan?>("ServiceOpenTime");

                    b.Property<bool>("Status");

                    b.Property<string>("UserChangedId");

                    b.Property<string>("UserCreatedId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("serviceItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CityId = 1,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(2852),
                            Name = "Hospitality Service 1",
                            Status = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CityId = 2,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3290),
                            Name = "Hospitality Service 2",
                            Status = false
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CityId = 3,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3296),
                            Name = "Hospitality Service 3",
                            Status = false
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CityId = 4,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3297),
                            Name = "Hospitality Service 4",
                            Status = false
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CityId = 5,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3298),
                            Name = "Hospitality Service 5",
                            Status = false
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CityId = 6,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3547),
                            Name = "Travel Service 1",
                            Status = false
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CityId = 7,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3549),
                            Name = "Travel Service 2",
                            Status = false
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CityId = 8,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3550),
                            Name = "Travel Service 3",
                            Status = false
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CityId = 9,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3551),
                            Name = "Travel Service 4",
                            Status = false
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CityId = 10,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3552),
                            Name = "Travel Service 5",
                            Status = false
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CityId = 11,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3570),
                            Name = "Transportation Service 1",
                            Status = false
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            CityId = 12,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3571),
                            Name = "Transportation Service 2",
                            Status = false
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            CityId = 13,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3572),
                            Name = "Transportation Service 3",
                            Status = false
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            CityId = 14,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3573),
                            Name = "Transportation Service 4",
                            Status = false
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            CityId = 15,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3634),
                            Name = "Transportation Service 5",
                            Status = false
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            CityId = 16,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3649),
                            Name = "Media Service 1",
                            Status = false
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            CityId = 17,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3650),
                            Name = "Media Service 2",
                            Status = false
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            CityId = 1,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3651),
                            Name = "Media Service 3",
                            Status = false
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            CityId = 2,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3651),
                            Name = "Media Service 4",
                            Status = false
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            CityId = 3,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3652),
                            Name = "Media Service 5",
                            Status = false
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 5,
                            CityId = 4,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3664),
                            Name = "Entertainment Service 1",
                            Status = false
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 5,
                            CityId = 5,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3665),
                            Name = "Entertainment Service 2",
                            Status = false
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 5,
                            CityId = 6,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3666),
                            Name = "Entertainment Service 3",
                            Status = false
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 5,
                            CityId = 7,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3667),
                            Name = "Entertainment Service 4",
                            Status = false
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 5,
                            CityId = 8,
                            CreationDate = new DateTime(2019, 9, 25, 13, 35, 27, 972, DateTimeKind.Local).AddTicks(3669),
                            Name = "Entertainment Service 5",
                            Status = false
                        });
                });

            modelBuilder.Entity("Servicefinder.Core.Model.ServiceItemViewLogModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChangeDate");

                    b.Property<string>("ChangedBy");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<int>("ServiceItemId");

                    b.Property<string>("UserChangedId");

                    b.Property<string>("UserCreatedId");

                    b.Property<string>("UserId");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("ServiceItemId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceItemViewLogModel");
                });

            modelBuilder.Entity("Servicefinder.Core.Model.ServiceReviewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChangeDate");

                    b.Property<string>("ChangedBy");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<bool>("EverUsed");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OverAllReview");

                    b.Property<string>("ReviewTest");

                    b.Property<DateTime>("ReviewTime");

                    b.Property<int>("ServiceItemId");

                    b.Property<bool>("ShowOptions");

                    b.Property<string>("UserChangedId");

                    b.Property<string>("UserCreatedId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceItemId");

                    b.HasIndex("UserId");

                    b.ToTable("serviceReview");
                });

            modelBuilder.Entity("Servicefinder.Core.Model.SubscriberModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChangeDate");

                    b.Property<string>("ChangedBy");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<string>("Email");

                    b.Property<string>("UserChangedId");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("Id");

                    b.ToTable("subscriber");
                });

            modelBuilder.Entity("Servicefinder.Core.Model.AnswerModel", b =>
                {
                    b.HasOne("Servicefinder.Core.Model.QuestionModel", "ServiceItem")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Servicefinder.Core.Model.QuestionModel", b =>
                {
                    b.HasOne("Servicefinder.Core.Model.ServiceItemModel", "ServiceItem")
                        .WithMany()
                        .HasForeignKey("ServiceItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServiceFinder.DI.Core.ApplicationUserModel", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Servicefinder.Core.Model.ServiceItemImageModel", b =>
                {
                    b.HasOne("Servicefinder.Core.Model.ServiceItemModel", "ServiceItem")
                        .WithMany()
                        .HasForeignKey("ServiceItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Servicefinder.Core.Model.ServiceItemModel", b =>
                {
                    b.HasOne("Servicefinder.Core.Model.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Servicefinder.Core.Model.CityModel", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("ServiceFinder.DI.Core.ApplicationUserModel", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Servicefinder.Core.Model.ServiceItemViewLogModel", b =>
                {
                    b.HasOne("Servicefinder.Core.Model.ServiceItemModel", "ServiceItem")
                        .WithMany()
                        .HasForeignKey("ServiceItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServiceFinder.DI.Core.ApplicationUserModel", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Servicefinder.Core.Model.ServiceReviewModel", b =>
                {
                    b.HasOne("Servicefinder.Core.Model.ServiceItemModel", "ServiceItem")
                        .WithMany()
                        .HasForeignKey("ServiceItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServiceFinder.DI.Core.ApplicationUserModel", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
